TO USE EMOJIES TYPE :<whatever emoji> Ex) :"raindbow" will produe 🌈


I'm using Dan Shiffman's Server-Side Programming and Databases with Node.js YouTube course to complete this project

Steps using Navigator geolocation application

Step 1: check is geolocation is available using

<script>
if ("geolocation" in navigator) {
  console.log('geolocation is available');
} else {
console.log('geolocation IS NOT available');
}
</script>

===============================================================================================================================================
Step 2: once we've verified that it is available we now want to geolocate

if ("geolocation" in navigator) {
  console.log('geolocation is available');
  navigator.geolocation.getCurrentPosition(position => {
  //uses the arrow function to prompt the console to show the position object when its ready in the console
    console.log(position);

  });
} else {
console.log('geolocation IS NOT available');
}
</script>

will get a pop up in the browser to ask is the server that I or my client is on which I created, can access their geo location.
They can either choose to allow or block. Has to be explicitly allowed by the user

<h1>Data Selfie App</h1>

<p>
  latitude: <span id="latitude"></span>&deg;</br>
  longitude: <span id="longitude"></span>&deg;</br>
</p>

this code is displaying the cordinates in the broswer, and the (&deg adds the degree symbol to the end)

==================================================================================================================================================

step 3: send the geolocation information to the server

key concept for video 2.2 Geolocation Web API - Working with Data and APIs in JavaScript: how to communicate data that's
extracted in the client and send it to the server and save it to the database


Video 2.3 Post Request with fetch() - working with Data and APIs in Javascript by Dan Shiffman

Post with fetch()

In this video, Dan is doing something important, a key feature here

* take Data from the client, the latitude and longitude, and send it to the server and have the server to eventually
save that user information into a data base

* not there, just want the client to execute its own client side JavaScript, gets the latitude and longitude, and sends that data to the server, and the
server can just console.log it for now

(Going to need to look at three things to do this)

* Routing - how do I set up a route in express. The end point for the API
  the address at which I will send the data to and later also make a request to receive some data
* JSON Parsing - need the route when it receives data to understand that data as JSON and make it readable
  in our code. Also need to look at adapting the fetch function to specify a POST request, a request that is posting
  data
* Also need to look at adapting the fetch function for adapting the fetch() function, to specify a POST Request
  request, that is posting data or sending data to the server

  -lets start with the route. We want to set up a route on my server, so the way that we do that is by specifying
   that, this particular route, will either be a GET or a POST. In this case we expect a POST request

* we now have a server that hosts a static file, so when we go and load the server into our browser, we see index.html

  - the JavaScript locates the html, geolocates the latitude and longitude and sends that with the POST to the server
  - the server then receives it and sends that with a POST to the server
  - the server receives it, console logs it out, and sends it back saying, I got it. The data is exchanged

GO BACK TO THIS VIDEO AND SEE IF I CAN ADD A SUBMIT BUTTON THAT POPULATES THE DATA BASE WITH INFORMATION OF EACH SESSION AFTER I SUBMIT
- make a variable like an array, and every time we get the latitude and longitude, save that variable to an array. That is persistence.
- Of course, once we quite the server, restart the server, its lost. So another thing I could try to do is look up the Node File System package 🔥🔥
- maybe I could use the Node File System package to save all of the stuff in that array to a text file, and I could always load that text file,
  maybe its JSON format, or plain text, or even CSV.
-While I am doing this, whether I am saving the latitude and longitude to an array or a text file, I should add a button to my HTML page, so that every times
  I click that button, when I send the latitude and longitude to the server itself. 🔥🔥🔥
=========================================================================================================================================================================================================================================


2.4 Saving to a Database - Working with Data and API's in JavaScript

* Its time to add a Database with NeDB
- also mentions that Firebase would be a great Database but that NeDB is a lightweight JavaScript Database and will be the perfect fit for the sake of this project

- Ask why do we need a database?
  - Answer: a database is for persistence, our ability to store information over the long haul. Whether or not we quit the server or restart the server, clients are connecting
    or disconencting, their information is saved.

  - classic example of this is we create a game, we are going to need somehwere to store that high score list. Maybe we have different user accounts with names and passwords, which would be a little
   tricky because we would have to deal with security there, but thats something that needs to be stored in a database.
   - cant do this with client side coding alone
   - dont need to make our own database, or keep own database on a server. We can use something called a database as a service. Dan has made videos before about a firebase, and how to have the firebase
     service store data for us. Theres also mLab which is also a database as a service, it uses the database system MongoDB, which is a very popular database system. Its known as a document database, meaning
     meaning the data is stored in basically documents like JSON files in a way.
   - mLab is a service, once again, that we can send data to and it will save it for us, and we could recieve data as well. could still use node but not have the database on our server. Could also use MongoDB with Node

   -NeDb is an open source, very light, very simple database, and we can run it in node. It is not going to be the end solution for a giant piece of software were building for a huge web application. But fore basic database functionality
    and learning about how to work with databases, its a wonderful system to use.
    -all of the documentation for NeDB is on github

    OKAY THIS PART IS FINISHED BUTTTTT...
      -he wants to see if I can add any additional information that can be submitted and entered and saved into the data base
      * uses a text box along with the button and populates the database with its value 🔥

===============================================================================================================================================================================================================================================

PREVIOUS CODE IN index.js file

app.post('/sending_data', (request, response) => {
  console.log("Testing")

  //res.send('POST request to the homepage')
  console.log("I got a request!");
  console.log("what: ",request.body);

  /*It is required that we complete a request. The best thing to do is send a response back when object or information has been
  recieved.*/
  const data = request.body;
  // database.push(data); insteading of saying database.push data, send we are relying on information sent from the client we can use insert
  const timestamp = Date.now(); //function explained in mozilla docs, the amount of time that has passed down to millisecond, from 1970
  data.timestamp = timestamp;
  database.insert(data);
  /*just like we pushed data into the array before, we are inserting it into the NeDb data store, and it will get saved in that file*/


    //const json_information = await response.json();
    //console.log("testing: ");
    //every time we receive new data we push it into the database
    console.log(database);
    console.log(request.body);
    response.json({
      status: 'success',
      name: data.user,
      timestamp:timestamp,
      latitude: data.lat,
      longitude: data.long
    });


  /*
  everything in the response.json is what we want to send back to the server as javaScript. Now in the client
  we want to do something to receive this
  */
});
/*When specifying a post, we are going to want to specify the address, where we want to receive that POST, as
well as a callback function, where I'm going to look at the information coming in and send a response back

now we are setting up the address, the endpoint for this particular route, where we want to receive
post. We can call it anything.

after the address, we need to set up a callback, (requests, response). We will be using the javaScript arrow syntax to create the
function which makes everything cleaner and replaces the generic function key word in the express version.

* so the function is here, and the request variable holds everything thats within that request. All the data thats being sent
  any information we need to know about that particular client is sending the information

* the response is a variable that we can use to send things back to the client.

* now we must move fetch our post over to the /sending_data endpoint.
    - so the client code, index.js and client index.html,
*/




===============================================================================================================================================================================================================================================
2.5 Database Query - Working with Data and APIs in JavaScript

- Dan Says theres almost nothing new to learn at this point
- It's just putting some of the pieces we've seen previously together in a slightly different way.
- Things we are going to look at again
  - need to look at routing again. So we need a new route in our server, but instead of app.post we are going to use app.get('/route');
  - going to need to use the fetch() function again, fetch() GET request, only this time we are going to use the simpler version of fetch(), just
    a simple get request, just to get information from the server itself
  - Finally we need to find functionality in the database system itself NeDB, that allows me to query the database, to find something.
    and in fact there is a function called find()
      -going to use find() to ask for everything from the database, but you can also use find() with search terms and other kinds of ways to ask
       for certain key aspects or parts of the database itself
- says that of course at some point we will want to move our JavaScript files into separate JavaScript files, maybe have some CSS files, but states this particular
  video series/course is not about web design or proper web development


NOW THEN
* ultimately what we want to do is from the client, we want to make a GET request to a route on the server, and have that route return all the data from the database
  - the way we will do this is with fetch()

  * Now for the final implementation of this page I want to use my web design skills to better format the all.html web page properly
  * 🔥 This project is done in many ways
    - we have implemented all of the pieces.
    - 1. we have client side JavaScript collecting some data
    - 2. that data is then passed off to the server
    - 3. saved to a database
    - 4. and also in the client, I can make a request to look at everything in the database
    *so this would work if I deployed the server somewhere and let people use it. There are definitely some things missing
     her like useraccounts but I can add that later
     - maybe theres some other kind of interesting data that I want to capture about myself through this web application
      - one of the things that Dan wants to do is add an image from a webcam 🔥,
      - talks about adding the P5 library, the creative coding JavaScript library, maybe connect to another API
      -get the weather API and get the weather information, also really want to think about how we are presenting this back
      -add some navigation between the pages, maybe change to single page web app

====================================================================================================================================================================

2.6 Saving Images and Base64 Encoding - Working with Data and APIs in JavaScript

* IMPLEMENTS USING P5.JS IN THIS VIDEO 🌈🌈🚋

* Going to use the p5.js library, to open up a connection to the webcam to display the webcam's image on an HTML5 JavaScript canvas
  and then to take the data from that image and pass it to the database

  -so this is another feature that we are going to add in the client side JavaScript
  - the client side JavaScript is doing the geolocation and it is now going to call the 05 function createCapture(VIDEO)
    -that video is going to be viewed in the clients browser, but then when the submit button is used, the data from
     that image will get sent to the server and stored to the database

NOW THEN:
-navigate over to the p5.js get started page, and look for link that says p5.js CDN
  -CDN (content delivery network) is a hosting service that will deliver you content, and the content that
   we want is the p5.js library

   - suggest to use the p5.min.js
    * when you see a JavaScript library, there's often what's known as a minified version and a non minified version
      if we wanted to really peek and view the source code files ourselves we would get the bigger version
      * But if we're just using the library, it's going to be a smaller file size and make things kind of snappier

    * notice that on the CDN page, there's a bunch of things listed, theres p5.dom, p5.soun, p5.dom.min
      the p5 library has several different component's to it
      -the core libary that you're pretty much always going to want is just p5.min.js
       *we also want to use the dom library, thats where the functionality for using the webcam is

  * Also grab the p5.dom.min file
    *😭they didn't have the dom file, I think the update excluded it


  *Base64 encoding is a method to take some binary data, in this case the image, all the colors of the pixels of the image and convert it to ASCII data
   meaning a string of text. This isn't doing anything to compress the image, its just repackaging the same data, in a format that's incredibly
   convenient to pass around

   * in other words I need to send the webcam image from here (the client), to the server, and a really easy way to do that is by sending a string
   of text to the server.
    - if we can turn the image into a string of text and then we have a nice way to post it to the server.

  * In JavaScript the HTML canvas PI includes a function called toDataURL(), which takes a canvas,
    presumably with pixels of information in it, and converts that to the base64 encoding of that image 🌈

  * now that we have the base64 encoding he recommends that we pull the encoding into a different file and then
    add the path to the file in the database, rather then the entire text file in the database
    - !!!HE IS ADDING SUPPLEMENTAL CODE TO DO THIS IN VIDEO AND ATTACHING LINK🔥🔥🔥
====================================================================================================================================================================================================================================

2.7 Project Wrap-up: Accessibility and Design - Working with Data and APIs in JavaScript

***Dan actually covers accessibility and Design in this video🌈🔥🚋

-- I will work on this after the demo and explain this to the professor and classmates 🔥🔥

📓 -- gives a lot of things to try to implement at the end of this video
    - check end of video for the parts of the project that I want to add for p5.js

=======================================================================================================================================================================================================================================

Starting On Module 3

3.1 API calls from Node.js (Weather data from Dark Sky) - Working with Data and APIs in JavaScript


😄 was able to get this section working and query information from open weather map to my console
=========================================================================================================================================================================================================================================

3.2 Open Air Quality API in Node.js - Working with Data and APIs in JavaScript

go to chrom developer tools -> three dot vertical menu in bottom left -> sensors
sensors are useful to simulate if I'm holding a mobile device and moving around

🔥 can test out weather data and location on map in different areas by going to the sensors option and selecting a different geolocation

==========================================================================================================================================================================================================================================

3.3 Mapping Database Entries with Leaflet.js - Working with Data and APIs in JavaScript

completed


==========================================================================================================================================================================================================================================

3.4 Hiding API Keys with Environment Variables (dotenv) and Pushing Code to GitHub

video explains how to hide api key

creating .env file to have my api key and created .env_sample to show the people how to enter their own

❗❗❗ created .gitignore - git is version control software that keeps track of all of my files and various versions of them
  🔥 - what .gitignore does is, it tells git, don't keep track of this file, that whatever is in the file is our own
       personal secret information, that we only want on our local machine, and not to upload it when the code is pushed to github
