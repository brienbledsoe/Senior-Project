I'm using Dan Shiffman's Server-Side Programming and Databases with Node.js YouTube course to complete this project

Steps using Navigator geolocation application

Step 1: check is geolocation is available using

<script>
if ("geolocation" in navigator) {
  console.log('geolocation is available');
} else {
console.log('geolocation IS NOT available');
}
</script>

===============================================================================================================================================
Step 2: once we've verified that it is available we now want to geolocate

if ("geolocation" in navigator) {
  console.log('geolocation is available');
  navigator.geolocation.getCurrentPosition(position => {
  //uses the arrow function to prompt the console to show the position object when its ready in the console
    console.log(position);

  });
} else {
console.log('geolocation IS NOT available');
}
</script>

will get a pop up in the browser to ask is the server that I or my client is on which I created, can access their geo location.
They can either choose to allow or block. Has to be explicitly allowed by the user

<h1>Data Selfie App</h1>

<p>
  latitude: <span id="latitude"></span>&deg;</br>
  longitude: <span id="longitude"></span>&deg;</br>
</p>

this code is displaying the cordinates in the broswer, and the (&deg adds the degree symbol to the end)

==================================================================================================================================================

step 3: send the geolocation information to the server

key concept for video 2.2 Geolocation Web API - Working with Data and APIs in JavaScript: how to communicate data that's
extracted in the client and send it to the server and save it to the database


Video 2.3 Post Request with fetch() - working with Data and APIs in Javascript by Dan Shiffman

Post with fetch()

In this video, Dan is doing something important, a key feature here

* take Data from the client, the latitude and longitude, and send it to the server and have the server to eventually
save that user information into a data base

* not there, just want the client to execute its own client side JavaScript, gets the latitude and longitude, and sends that data to the server, and the
server can just console.log it for now

(Going to need to look at three things to do this)

* Routing - how do I set up a route in express. The end point for the API
  the address at which I will send the data to and later also make a request to receive some data
* JSON Parsing - need the route when it receives data to understand that data as JSON and make it readable
  in our code. Also need to look at adapting the fetch function to specify a POST request, a request that is posting
  data
* Also need to look at adapting the fetch function for adapting the fetch() function, to specify a POST Request
  request, that is posting data or sending data to the server

  -lets start with the route. We want to set up a route on my server, so the way that we do that is by specifying
   that, this particular route, will either be a GET or a POST. In this case we expect a POST request

* we now have a server that hosts a static file, so when we go and load the server into our browser, we see index.html

  - the JavaScript locates the html, geolocates the latitude and longitude and sends that with the POST to the server
  - the server then receives it and sends that with a POST to the server
  - the server receives it, console logs it out, and sends it back saying, I got it. The data is exchanged

GO BACK TO THIS VIDEO AND SEE IF I CAN ADD A SUBMIT BUTTON THAT POPULATES THE DATA BASE WITH INFORMATION OF EACH SESSION AFTER I SUBMIT
- make a variable like an array, and every time we get the latitude and longitude, save that variable to an array. That is persistence.
- Of course, once we quite the server, restart the server, its lost. So another thing I could try to do is look up the Node File System package ðŸ”¥ðŸ”¥
- maybe I could use the Node File System package to save all of the stuff in that array to a text file, and I could always load that text file,
  maybe its JSON format, or plain text, or even CSV.
-While I am doing this, whether I am saving the latitude and longitude to an array or a text file, I should add a button to my HTML page, so that every times
  I click that button, when I send the latitude and longitude to the server itself. ðŸ”¥ðŸ”¥ðŸ”¥
=========================================================================================================================================================================================================================================


Video 2.4 Saving to a Database - Working with Data and API's in JavaScript

* Its time to add a Database with NeDB
- also mentions that Firebase would be a great Database but that NeDB is a lightweight JavaScript Database and will be the perfect fit for the sake of this project

- Ask why do we need a database?
  - Answer: a database is for persistence, our ability to store information over the long haul. Whether or not we quit the server or restart the server, clients are connecting
    or disconencting, their information is saved.

  - classic example of this is we create a game, we are going to need somehwere to store that high score list. Maybe we have different user accounts with names and passwords, which would be a little
   tricky because we would have to deal with security there, but thats something that needs to be stored in a database.
   - cant do this with client side coding alone
   - dont need to make our own database, or keep own database on a server. We can use something called a database as a service. Dan has made videos before about a firebase, and how to have the firebase
     service store data for us. Theres also mLab which is also a database as a service, it uses the database system MongoDB, which is a very popular database system. Its known as a document database, meaning
     meaning the data is stored in basically documents like JSON files in a way.
   - mLab is a service, once again, that we can send data to and it will save it for us, and we could recieve data as well. could still use node but not have the database on our server. Could also use MongoDB with Node

   -NeDb is an open source, very light, very simple database, and we can run it in node. It is not going to be the end solution for a giant piece of software were building for a huge web application. But fore basic database functionality
    and learning about how to work with databases, its a wonderful system to use.
    -all of the documentation for NeDB is on github

    OKAY THIS PART IS FINISHED BUTTTTT...
      -he wants to see if I can add any additional information that can be submitted and entered and saved into the data base
      * uses a text box along with the button and populates the database with its value ðŸ”¥

===============================================================================================================================================================================================================================================

2.5 Database Query - Working with Data and APIs in JavaScript

- Dan Says theres almost nothing new to learn at this point
- It's just putting some of the pieces we've seen previously together in a slightly different way.
- Things we are going to look at again
  - need to look at routing again. So we need a new route in our server, but instead of app.post we are going to use app.get('/route');
  - going to need to use the fetch() function again, fetch() GET request, only this time we are going to use the simpler version of fetch(), just
    a simple get request, just to get information from the server itself
  - Finally we need to find functionality in the database system itself NeDB, that allows me to query the database, to find something.
    and in fact there is a function called find()
      -going to use find() to ask for everything from the database, but you can also use find() with search terms and other kinds of ways to ask
       for certain key aspects or parts of the database itself
